#!/usr/local/bin/lngrd

2 |@stderr
1 |@color
catch
\
  if (@query "NO_COLOR")
  \
    0 |@color
  /
/
1 |@persistence
catch
\
  if (@query "NO_PERSISTENCE")
  \
    0 |@persistence
  /
/

<
  argument 1 |$status
  argument 2 |$color

  if @color
  \
    (@write @stderr "\x1b[7;")
    (@write @stderr (@serialize $color))
    (@write @stderr "m ")
    (@write @stderr $status)
    (@write @stderr " \x1b[0m\n")
  /
  if (@not @color)
  \
    (@write @stderr "[")
    (@write @stderr $status)
    (@write @stderr "]\n")
  /
> |@writeStatus

<
  argument 1 |$header
  argument 2 |$value

  if @color
  \
    (@write @stderr "\x1b[1m")
    (@write @stderr $header)
    (@write @stderr ":\x1b[0m\n")
    (@write @stderr $value)
    (@write @stderr "\n")
  /
  if (@not @color)
  \
    (@write @stderr $header)
    (@write @stderr ":\n")
    (@write @stderr $value)
    (@write @stderr "\n")
  /
> |@writeDetail

<
  argument 1 |$do
  argument 2 |$expected

  catch \ ($do) |$returned / |$thrown

  if $thrown
  \
    (@writeStatus "FAIL" 31)
    (@writeDetail "Reason" "an unexpected error was thrown")
    (@writeDetail "Thrown" (@serialize $thrown))
    (@writeDetail "Source" (@serialize $do))
    (@exit 1)
  /

  if (@not (@equals $returned $expected))
  \
    (@writeStatus "FAIL" 31)
    (@writeDetail "Reason" "an unexpected value was returned")
    (@writeDetail "Actual" (@serialize $returned))
    (@writeDetail "Expected" (@serialize $expected))
    (@writeDetail "Source" (@serialize $do))
    (@exit 1)
  /
> |@returns

<
  argument 1 |$do
  argument 2 |$expected

  catch \ ($do) |$returned / |$thrown

  if (@not $thrown)
  \
    (@writeStatus "FAIL" 31)
    (@writeDetail "Reason" "an expected error was not thrown")
    (@writeDetail "Returned" (@serialize $returned))
    (@writeDetail "Source" (@serialize $do))
    (@exit 1)
  /

  if (@not (@equals $thrown $expected))
  \
    (@writeStatus "FAIL" 31)
    (@writeDetail "Reason" "an unexpected error was thrown")
    (@writeDetail "Actual" (@serialize $thrown))
    (@writeDetail "Expected" (@serialize $expected))
    (@writeDetail "Source" (@serialize $do))
    (@exit 1)
  /
> |@throws

<
  argument 1 |$source

  catch \ (@deserialize $source) |$returned / |$thrown

  if (@not $thrown)
  \
    (@writeStatus "FAIL" 31)
    (@writeDetail "Reason" "an expected error was not thrown")
    (@writeDetail "Returned" (@serialize $returned))
    (@writeDetail "Source" (@serialize $source))
    (@exit 1)
  /

  "codec error" |$expected

  if (@not (@equals $thrown $expected))
  \
    (@writeStatus "FAIL" 31)
    (@writeDetail "Reason" "an unexpected error was thrown")
    (@writeDetail "Actual" (@serialize $thrown))
    (@writeDetail "Expected" (@serialize $expected))
    (@writeDetail "Source" (@serialize $source))
    (@exit 1)
  /
> |@mistakes

catch
\
  \
    # number expression

    (@returns <0> 0)
    (@returns <1> 1)
    (@returns <-1> -1)
    (@returns <+1> 1)
    (@returns <100> 100)
    (@returns <-100> -100)
    (@returns <+100> 100)
    (@returns <2147483647> 2147483647)
    (@returns <-2147483647> -2147483647)
    (@returns <+2147483647> 2147483647)
    (@returns <000000000000000000000000000000000000000000000000002147483647> 2147483647)
    (@mistakes "2147483648")
    (@mistakes "-2147483648")
    (@mistakes "+2147483648")
    (@mistakes "--100")
    (@mistakes "++100")
  /

  \
    # string expression

    (@returns <""> "")
    (@returns <"text"> "text")
    (@returns <(@length "\\\"\t\r\n")> 5)
    (@returns <(@length "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f")> 16)
    (@returns <(@length "\x00\x10\x20\x30\x40\x50\x60\x70\x80\x90\xa0\xb0\xc0\xd0\xe0\xf0")> 16)
    (@returns <(@length "\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff")> 16)
    (@returns <"line 1\nline 2\nline 3"> "line 1\nline 2\nline 3")
    (@returns <"line 1\x0aline 2\x0aline 3"> "line 1\nline 2\nline 3")
    (@returns <"\x74\x65\x78\x74"> "text")
    (@returns <"\x7c123\x7c"> "|123|")
    (@returns <"\x7cabc\x7c"> "|abc|")
    (@mistakes "\"\\xFF\"")
    (@mistakes "\"\\z\"")
    (@mistakes "\"\\x\"")
    (@mistakes "\"\\x0\"")
    (@mistakes "\"\\x0z\"")
    (@mistakes "\"\\xz0\"")
  /

  \
    # function expression

    (@returns <<>> <>)
    (@returns <<throw "error">> <throw "error">)
    (@returns <@add> @add)
    (@returns <@add> <(@add argument 1 argument 2)>)
    (@returns <@subtract> <(@subtract argument 1 argument 2)>)
    (@returns <@multiply> <(@multiply argument 1 argument 2)>)
    (@returns <@divide> <(@divide argument 1 argument 2)>)
    (@returns <@modulo> <(@modulo argument 1 argument 2)>)
    (@returns <@increment> <(@increment argument 1)>)
    (@returns <@decrement> <(@decrement argument 1)>)
    (@returns <@and> <(@and argument 1 argument 2)>)
    (@returns <@or> <(@or argument 1 argument 2)>)
    (@returns <@not> <(@not argument 1)>)
    (@returns <@precedes> <(@precedes argument 1 argument 2)>)
    (@returns <@succeeds> <(@succeeds argument 1 argument 2)>)
    (@returns <@equals> <(@equals argument 1 argument 2)>)
    (@returns <@length> <(@length argument 1)>)
    (@returns <@slice> <(@slice argument 1 argument 2 argument 3)>)
    (@returns <@merge> <(@merge argument 1 argument 2)>)
    (@returns <@read> <(@read argument 1 argument 2)>)
    (@returns <@write> <(@write argument 1 argument 2)>)
    (@returns <@delete> <(@delete argument 1)>)
    (@returns <@query> <(@query argument 1)>)
    (@returns <@exit> <(@exit argument 1)>)
    (@returns <@serialize> <(@serialize argument 1)>)
    (@returns <@deserialize> <(@deserialize argument 1)>)
    (@returns <@type> <(@type argument 1)>)
  /

  \
    # lookup expression

    (@returns <"text" |$variable $variable> "text")
    (@returns <"text" |$variable |$clone $clone> "text")
    (@returns <"text" |$variable |$variable $variable> "text")
    (@returns <0 |$0 1 |$1 2 |$2 %$0 %$1 $2> 2)
    (@returns <0 |$0 1 |$1 2 |$2 %$0 %$2 $1> 1)
    (@returns <0 |$0 1 |$1 2 |$2 %$1 %$2 $0> 0)
    (@returns <0 |$0 4 |$4 8 |$8 %$0 %$4 $8> 8)
    (@returns <0 |$0 4 |$4 8 |$8 %$0 %$8 $4> 4)
    (@returns <0 |$0 4 |$4 8 |$8 %$4 %$8 $0> 0)
    (@returns <0 |$0 8 |$8 32 |$32 %$0 %$8 $32> 32)
    (@returns <0 |$0 8 |$8 32 |$32 %$0 %$32 $8> 8)
    (@returns <0 |$0 8 |$8 32 |$32 %$8 %$32 $0> 0)
    (@returns <"x" |$0 |$1 |$2 |$3 |$4 |$5 |$6 |$7 |$8 |$9 $0> "x")
    (@returns <"x" |$0 |$1 |$2 |$3 |$4 |$5 |$6 |$7 |$8 |$9 $9> "x")
    (@returns <"x" |$0 |$0 |$0 |$0 |$0 |$0 |$0 |$0 |$0 |$0 $0> "x")
    (@returns <0 |$0 1 |$1 2 |$2 3 |$3 4 |$4 5 |$5 6 |$6 7 |$7 8 |$8 9 |$9 $0> 0)
    (@returns <0 |$0 1 |$1 2 |$2 3 |$3 4 |$4 5 |$5 6 |$6 7 |$7 8 |$8 9 |$9 $9> 9)
    (@mistakes "@")
    (@mistakes "@\"\\z\"")
    (@mistakes "|@\"\\z\"")
    (@mistakes "%@\"\\z\"")
  /

  \
    # assign expression

    (@returns <"text" |$variable> "text")
    (@returns <"text" |$variable |$clone> "text")
    (@returns <"text" |$variable |$variable> "text")
    (@returns <|$variable> "")
    (@returns <@add |$a ($a 0 1)> 1)
    (@returns <"text" |$"variable" $"variable"> "text")
    (@returns <"text" |$"variable" $variable> "text")
    (@returns <"text" |$variable $"variable"> "text")
    (@returns <"text" |$"" $""> "text")
    (@returns <"text" |$"\"special\"" $"\"special\""> "text")
    (@returns <@add |$saved <"x"> |@add (@add) |$result $saved |@add $result> "x")
    (@mistakes "|")
    (@mistakes "@|")
    (@mistakes "|@")
  /

  \
    # unassign expression

    (@returns <%$variable> "")
    (@throws <"text" |$variable %$variable $variable> "absent variable")
    (@throws <"text" |$"\"special\"" %$"\"special\"" $"\"special\""> "absent variable")
  /

  \
    # invoke expression

    (@returns <(<>)> "")
    (@returns <(<"x">)> "x")
    (@throws <(<throw "error">)> "error")
    (@returns <<"x"> |$f ($f) ($f) ($f)> "x")
    (@returns <(catch \ throw <"x"> /)> "x")
    (@returns <(@add 0 1)> 1)
    (@returns <(@add 0 1) (@add 0 2) (@add 0 3)> 3)
    (@returns <(@add 1 (@add 2 (@add 3 4)))> 10)
    (@returns <(@add 0 1 "extra")> 1)
    (@returns <0 |$n (<1 |$n>) (<2 |$n>) (<3 |$n>) $n> 0)
    (@returns <0 |@n (<1 |@n>) (<2 |@n>) (<3 |@n>) @n |$n %@n $n> 3)
    (@returns <0 |$n (<> (<1 |$n>) (<2 |$n>) (<3 |$n>)) $n> 0)
    (@returns <0 |@n (<> (<1 |@n>) (<2 |@n>) (<3 |@n>)) @n |$n %@n $n> 3)
    (@returns <0 |$n (<> (<> (<1 |$n>) (<2 |$n>) (<3 |$n>))) $n> 0)
    (@returns <0 |@n (<> (<> (<1 |@n>) (<2 |@n>) (<3 |@n>))) @n |$n %@n $n> 3)
    (@throws <"x" |$var (<$var>)> "absent variable")
    (@throws <(<"x" |$var>) $var> "absent variable")
    (@returns <"x" |@var (<@var>) @var |$var %@var $var> "x")
    (@returns <(<"x" |@var>) @var |$var %@var $var> "x")
    (@throws <(@write 2 "text" $invalid)> "absent variable")
  /

  \
    # branch expression

    (@returns <if "0" "x"> "x")
    (@returns <if "1" "x"> "x")
    (@returns <if "x" "x"> "x")
    (@returns <if "" "x"> "")
    (@returns <if <> "x"> "")
    (@returns <if < > "x"> "")
    (@returns <if <1> "x"> "x")
    (@returns <if @write "x"> "x")
    (@returns <if "1" if "2" "x"> "x")
    (@returns <if "1" if "" "x"> "")
    (@returns <if "" if "2" "x"> "")
    (@returns <if "" if "" "x"> "")
    (@mistakes "if")
    (@mistakes "if \"\"")
  /

  \
    # loop expression

    (@returns <while "" \ /> "")
    (@returns <"x" |$test while $test \ "" |$test /> "")
    (@returns <"x" |$test while $test \ "" |$test / $test> "")
    (@returns <0 |$i while (@precedes $i 100) \ (@add $i 1) |$i /> "")
    (@returns <0 |$i while (@precedes $i 100) \ (@add $i 1) |$i / $i> 100)
    (@mistakes "while")
    (@mistakes "while \"\"")
  /

  \
    # catch expression

    (@returns <catch \ $missing /> "absent variable")
    (@returns <catch \ "text" /> "")
    (@returns <catch \ /> "")
    (@mistakes "catch")
  /

  \
    # throw expression

    (@throws <throw "error"> "error")
    (@returns <catch \ throw "error" /> "error")
    (@returns <(catch \ throw @add / 0 1)> 1)
    (@throws <throw throw "error"> "error")
    (@mistakes "throw")
  /

  \
    # argument expression

    (@returns <(<argument 1> "a" "b" "c")> "a")
    (@returns <(<argument 2> "a" "b" "c")> "b")
    (@returns <(<argument 3> "a" "b" "c")> "c")
    (@returns <<(@increment argument 1)> |$inc ($inc 0) |$n ($inc $n) |$n ($inc $n)> 3)
    (@returns <<(@merge argument 1 "!")> |$bold ($bold "x")> "x!")
    (@returns <(<argument 1> "x")> "x")
    (@returns <(<(@merge argument 1 (@merge argument 1 argument 1))> "x")> "xxx")
    (@returns <(<argument 1 |$arg (@merge $arg "!")> "x")> "x!")
    (@throws <<
  argument 1 |$self
  argument 2 |$i
  (@precedes $i 1000) |$cont
  if $cont
    ($self $self (@increment $i))
  if (@not $cont)
    throw $i
> |$recurse
($recurse $recurse 1)
> 1000)
    (@throws <(<argument 0> "a" "b" "c")> "absent argument")
    (@throws <(<argument 4> "a" "b" "c")> "absent argument")
    (@throws <argument 1> "absent argument")
    (@throws <(<argument 1>)> "absent argument")
    (@throws <(<argument 1> "x") argument 1> "absent argument")
    (@throws <argument ""> "alien argument")
    (@throws <argument <>> "alien argument")
  /

  \
    # group expression

    (@returns <\ /> "")
    (@returns <\ "a" /> "a")
    (@returns <\ "a" "b" "c" /> "c")
    (@mistakes "\\")
    (@mistakes "/")
  /

  \
    # add built-in

    (@returns <(@add 0 0)> 0)
    (@returns <(@add 0 1)> 1)
    (@returns <(@add -1 1)> 0)
    (@returns <(@add 2147483647 0)> 2147483647)
    (@returns <(@add -2147483647 0)> -2147483647)
    (@throws <(@add 2147483647 1)> "arithmetic error")
    (@throws <(@add 1 2147483647)> "arithmetic error")
    (@throws <(@add 2147483647 2147483647)> "arithmetic error")
    (@throws <(@add -2147483647 -1)> "arithmetic error")
    (@throws <(@add -1 -2147483647)> "arithmetic error")
    (@throws <(@add -2147483647 -2147483647)> "arithmetic error")
    (@throws <(@add)> "absent argument")
    (@throws <(@add 0)> "absent argument")
    (@throws <(@add "" 0)> "alien argument")
    (@throws <(@add 0 "")> "alien argument")
    (@throws <(@add <> 0)> "alien argument")
    (@throws <(@add 0 <>)> "alien argument")
  /

  \
    # subtract built-in

    (@returns <(@subtract 0 0)> 0)
    (@returns <(@subtract 0 -1)> 1)
    (@returns <(@subtract -1 -1)> 0)
    (@returns <(@subtract 2147483647 0)> 2147483647)
    (@returns <(@subtract -2147483647 0)> -2147483647)
    (@throws <(@subtract 2147483647 -1)> "arithmetic error")
    (@throws <(@subtract -1 2147483647)> "arithmetic error")
    (@throws <(@subtract 2147483647 -2147483647)> "arithmetic error")
    (@throws <(@subtract -2147483647 1)> "arithmetic error")
    (@throws <(@subtract 1 -2147483647)> "arithmetic error")
    (@throws <(@subtract -2147483647 2147483647)> "arithmetic error")
    (@throws <(@subtract)> "absent argument")
    (@throws <(@subtract 0)> "absent argument")
    (@throws <(@subtract "" 0)> "alien argument")
    (@throws <(@subtract 0 "")> "alien argument")
    (@throws <(@subtract <> 0)> "alien argument")
    (@throws <(@subtract 0 <>)> "alien argument")
  /

  \
    # multiply built-in

    (@returns <(@multiply 0 0)> 0)
    (@returns <(@multiply 1 1)> 1)
    (@returns <(@multiply 1 0)> 0)
    (@returns <(@multiply 2147483647 1)> 2147483647)
    (@returns <(@multiply -2147483647 1)> -2147483647)
    (@throws <(@multiply 2147483647 2)> "arithmetic error")
    (@throws <(@multiply 2147483647 -2)> "arithmetic error")
    (@throws <(@multiply -2147483647 2)> "arithmetic error")
    (@throws <(@multiply -2147483647 -2)> "arithmetic error")
    (@throws <(@multiply 2 2147483647)> "arithmetic error")
    (@throws <(@multiply 2 -2147483647)> "arithmetic error")
    (@throws <(@multiply -2 2147483647)> "arithmetic error")
    (@throws <(@multiply -2 -2147483647)> "arithmetic error")
    (@throws <(@multiply 2147483647 2147483647)> "arithmetic error")
    (@throws <(@multiply 2147483647 -2147483647)> "arithmetic error")
    (@throws <(@multiply -2147483647 2147483647)> "arithmetic error")
    (@throws <(@multiply -2147483647 -2147483647)> "arithmetic error")
    (@throws <(@multiply)> "absent argument")
    (@throws <(@multiply 0)> "absent argument")
    (@throws <(@multiply "" 0)> "alien argument")
    (@throws <(@multiply 0 "")> "alien argument")
    (@throws <(@multiply <> 0)> "alien argument")
    (@throws <(@multiply 0 <>)> "alien argument")
  /

  \
    # divide built-in

    (@returns <(@divide 0 1)> 0)
    (@returns <(@divide 1 1)> 1)
    (@returns <(@divide 1 4)> 0)
    (@returns <(@divide 2147483647 1)> 2147483647)
    (@returns <(@divide -2147483647 1)> -2147483647)
    (@returns <(@divide 2147483647 2147483647)> 1)
    (@returns <(@divide 2147483647 -2147483647)> -1)
    (@returns <(@divide -2147483647 2147483647)> -1)
    (@returns <(@divide -2147483647 -2147483647)> 1)
    (@throws <(@divide 1 0)> "arithmetic error")
    (@throws <(@divide -1 0)> "arithmetic error")
    (@throws <(@divide)> "absent argument")
    (@throws <(@divide 0)> "absent argument")
    (@throws <(@divide "" 0)> "alien argument")
    (@throws <(@divide 0 "")> "alien argument")
    (@throws <(@divide <> 0)> "alien argument")
    (@throws <(@divide 0 <>)> "alien argument")
  /

  \
    # modulo built-in

    (@returns <(@modulo 1 1)> 0)
    (@returns <(@modulo 5 2)> 1)
    (@returns <(@modulo 0 1)> 0)
    (@returns <(@modulo 2147483647 2147483647)> 0)
    (@returns <(@modulo 2147483647 -2147483647)> 0)
    (@returns <(@modulo -2147483647 2147483647)> 0)
    (@returns <(@modulo -2147483647 -2147483647)> 0)
    (@throws <(@modulo 1 0)> "arithmetic error")
    (@throws <(@modulo -1 0)> "arithmetic error")
    (@throws <(@modulo)> "absent argument")
    (@throws <(@modulo 0)> "absent argument")
    (@throws <(@modulo "" 0)> "alien argument")
    (@throws <(@modulo 0 "")> "alien argument")
    (@throws <(@modulo <> 0)> "alien argument")
    (@throws <(@modulo 0 <>)> "alien argument")
  /

  \
    # increment built-in

    (@returns <(@increment -1)> 0)
    (@returns <(@increment 0)> 1)
    (@returns <(@increment 2147483646)> 2147483647)
    (@throws <(@increment 2147483647)> "arithmetic error")
    (@throws <(@increment)> "absent argument")
    (@throws <(@increment "")> "alien argument")
    (@throws <(@increment <>)> "alien argument")
  /

  \
    # decrement built-in

    (@returns <(@decrement 1)> 0)
    (@returns <(@decrement 0)> -1)
    (@returns <(@decrement -2147483646)> -2147483647)
    (@throws <(@decrement -2147483647)> "arithmetic error")
    (@throws <(@decrement)> "absent argument")
    (@throws <(@decrement "")> "alien argument")
    (@throws <(@decrement <>)> "alien argument")
  /

  \
    # and built-in

    (@returns <(@and 0 0)> 0)
    (@returns <(@and 0 1)> 0)
    (@returns <(@and 1 0)> 0)
    (@returns <(@and 1 1)> 1)
    (@returns <(@and "" "")> 0)
    (@returns <(@and "" "x")> 0)
    (@returns <(@and "x" "")> 0)
    (@returns <(@and "x" "x")> 1)
    (@returns <(@and 1 "x")> 1)
    (@throws <(@and)> "absent argument")
    (@throws <(@and 0)> "absent argument")
  /

  \
    # or built-in

    (@returns <(@or 0 0)> 0)
    (@returns <(@or 0 1)> 1)
    (@returns <(@or 1 0)> 1)
    (@returns <(@or 1 1)> 1)
    (@returns <(@or "" "")> 0)
    (@returns <(@or "" "x")> 1)
    (@returns <(@or "x" "")> 1)
    (@returns <(@or "x" "x")> 1)
    (@returns <(@or 1 "x")> 1)
    (@throws <(@or)> "absent argument")
    (@throws <(@or 0)> "absent argument")
  /

  \
    # not built-in

    (@returns <(@not 0)> 1)
    (@returns <(@not 1)> 0)
    (@returns <(@not "")> 1)
    (@returns <(@not "x")> 0)
    (@throws <(@not)> "absent argument")
  /

  \
    # precedes built-in

    (@returns <(@precedes 0 100)> 1)
    (@returns <(@precedes 100 0)> 0)
    (@returns <(@precedes 100 100)> 0)
    (@returns <(@precedes 0 -100)> 0)
    (@returns <(@precedes -100 0)> 1)
    (@returns <(@precedes -100 -100)> 0)
    (@returns <(@precedes "a" "b")> 1)
    (@returns <(@precedes "b" "a")> 0)
    (@returns <(@precedes "a" "a")> 0)
    (@returns <(@precedes "A" "a")> 1)
    (@returns <(@precedes "a" "A")> 0)
    (@returns <(@precedes "A" "A")> 0)
    (@returns <(@precedes @add @subtract)> 1)
    (@returns <(@precedes @subtract @add)> 0)
    (@returns <(@precedes @add @add)> 0)
    (@returns <(@precedes <(@merge "a" "b")> <(@merge "b" "a")>)> 1)
    (@returns <(@precedes <(@merge "b" "a")> <(@merge "a" "b")>)> 0)
    (@returns <(@precedes <(@merge "a" "b")> <(@merge "a" "b")>)> 0)
    (@returns <(@precedes @add <(@add argument 1 argument 2)>)> 0)
    (@returns <(@precedes <(@add argument 1 argument 2)> @add)> 0)
    (@returns <(@precedes 100 "100")> 1)
    (@returns <(@precedes 100 @add)> 1)
    (@returns <(@precedes "100" 100)> 0)
    (@returns <(@precedes "100" @add)> 1)
    (@returns <(@precedes @add 100)> 0)
    (@returns <(@precedes @add "100")> 0)
    (@throws <(@precedes)> "absent argument")
    (@throws <(@precedes 0)> "absent argument")
  /

  \
    # succeeds built-in

    (@returns <(@succeeds 0 100)> 0)
    (@returns <(@succeeds 100 0)> 1)
    (@returns <(@succeeds 100 100)> 0)
    (@returns <(@succeeds 0 -100)> 1)
    (@returns <(@succeeds -100 0)> 0)
    (@returns <(@succeeds -100 -100)> 0)
    (@returns <(@succeeds "a" "b")> 0)
    (@returns <(@succeeds "b" "a")> 1)
    (@returns <(@succeeds "a" "a")> 0)
    (@returns <(@succeeds "A" "a")> 0)
    (@returns <(@succeeds "a" "A")> 1)
    (@returns <(@succeeds "A" "A")> 0)
    (@returns <(@succeeds @add @subtract)> 0)
    (@returns <(@succeeds @subtract @add)> 1)
    (@returns <(@succeeds @add @add)> 0)
    (@returns <(@succeeds <(@merge "a" "b")> <(@merge "b" "a")>)> 0)
    (@returns <(@succeeds <(@merge "b" "a")> <(@merge "a" "b")>)> 1)
    (@returns <(@succeeds <(@merge "a" "b")> <(@merge "a" "b")>)> 0)
    (@returns <(@succeeds @add <(@add argument 1 argument 2)>)> 0)
    (@returns <(@succeeds <(@add argument 1 argument 2)> @add)> 0)
    (@returns <(@succeeds 100 "100")> 0)
    (@returns <(@succeeds 100 @add)> 0)
    (@returns <(@succeeds "100" 100)> 1)
    (@returns <(@succeeds "100" @add)> 0)
    (@returns <(@succeeds @add 100)> 1)
    (@returns <(@succeeds @add "100")> 1)
    (@throws <(@succeeds)> "absent argument")
    (@throws <(@succeeds 0)> "absent argument")
  /

  \
    # equals built-in

    (@returns <(@equals 0 100)> 0)
    (@returns <(@equals 100 0)> 0)
    (@returns <(@equals 100 100)> 1)
    (@returns <(@equals 0 -100)> 0)
    (@returns <(@equals -100 0)> 0)
    (@returns <(@equals -100 -100)> 1)
    (@returns <(@equals "a" "b")> 0)
    (@returns <(@equals "b" "a")> 0)
    (@returns <(@equals "a" "a")> 1)
    (@returns <(@equals "A" "a")> 0)
    (@returns <(@equals "a" "A")> 0)
    (@returns <(@equals "A" "A")> 1)
    (@returns <(@equals @add @subtract)> 0)
    (@returns <(@equals @subtract @add)> 0)
    (@returns <(@equals @add @add)> 1)
    (@returns <(@equals <(@merge "a" "b")> <(@merge "b" "a")>)> 0)
    (@returns <(@equals <(@merge "b" "a")> <(@merge "a" "b")>)> 0)
    (@returns <(@equals <(@merge "a" "b")> <(@merge "a" "b")>)> 1)
    (@returns <(@equals @add <(@add argument 1 argument 2)>)> 1)
    (@returns <(@equals <(@add argument 1 argument 2)> @add)> 1)
    (@returns <(@equals 100 "100")> 0)
    (@returns <(@equals 100 @add)> 0)
    (@returns <(@equals "100" 100)> 0)
    (@returns <(@equals "100" @add)> 0)
    (@returns <(@equals @add 100)> 0)
    (@returns <(@equals @add "100")> 0)
    (@throws <(@equals)> "absent argument")
    (@throws <(@equals 0)> "absent argument")
  /

  \
    # length built-in

    (@returns <(@length "")> 0)
    (@returns <(@length "1")> 1)
    (@returns <(@length " ")> 1)
    (@returns <(@length "123")> 3)
    (@throws <(@length)> "absent argument")
    (@throws <(@length 0)> "alien argument")
    (@throws <(@length <>)> "alien argument")
  /

  \
    # slice built-in

    (@returns <(@slice "" 1 1)> "")
    (@returns <(@slice "x" 1 1)> "x")
    (@returns <(@slice "123" 1 1)> "1")
    (@returns <(@slice "123" 2 2)> "2")
    (@returns <(@slice "123" 3 3)> "3")
    (@returns <(@slice "123" 1 3)> "123")
    (@returns <(@slice "123" 0 3)> "123")
    (@returns <(@slice "123" 1 4)> "123")
    (@returns <(@slice "123" 3 1)> "123")
    (@returns <(@slice "123" 3 0)> "123")
    (@returns <(@slice "123" 4 1)> "123")
    (@throws <(@slice)> "absent argument")
    (@throws <(@slice "")> "absent argument")
    (@throws <(@slice "" 0)> "absent argument")
    (@throws <(@slice 0 0 0)> "alien argument")
    (@throws <(@slice <> 0 0)> "alien argument")
    (@throws <(@slice "" "" 0)> "alien argument")
    (@throws <(@slice "" <> 0)> "alien argument")
    (@throws <(@slice "" 0 "")> "alien argument")
    (@throws <(@slice "" 0 <>)> "alien argument")
  /

  \
    # merge built-in

    (@returns <(@merge "" "")> "")
    (@returns <(@merge "l" "")> "l")
    (@returns <(@merge "" "r")> "r")
    (@returns <(@merge "l" "r")> "lr")
    (@returns <(@merge "ll" "rrrr")> "llrrrr")
    (@throws <(@merge)> "absent argument")
    (@throws <(@merge "")> "absent argument")
    (@throws <(@merge 0 "")> "alien argument")
    (@throws <(@merge "" 0)> "alien argument")
    (@throws <(@merge <> "")> "alien argument")
    (@throws <(@merge "" <>)> "alien argument")
  /

  \
    # read built-in

    if @persistence
    \
      (@throws <(@write "/tmp/lngrd.txt" "text") (@delete "/tmp/lngrd.txt") (@read "/tmp/lngrd.txt" "")> "absent file")
      (@throws <(@read 3 "")> "absent file")
      (@throws <(@read "" "")> "absent file")
      (@throws <(@read)> "absent argument")
      (@throws <(@read "")> "absent argument")
      (@throws <(@read "" 0)> "alien argument")
      (@throws <(@read "" <>)> "alien argument")
    /
  /

  \
    # write built-in

    if @persistence
    \
      (@returns <(@write "/tmp/lngrd.txt" "text") (@read "/tmp/lngrd.txt" "") |$file (@delete "/tmp/lngrd.txt") $file> "text")
      (@throws <(@write 3 "")> "absent file")
      (@throws <(@write "" "")> "absent file")
      (@throws <(@write)> "absent argument")
      (@throws <(@write "")> "absent argument")
      (@throws <(@write "" 0)> "alien argument")
      (@throws <(@write "" <>)> "alien argument")
    /
  /

  \
    # delete built-in

    if @persistence
    \
      (@throws <(@write "/tmp/lngrd.txt" "text") (@delete "/tmp/lngrd.txt") (@delete "/tmp/lngrd.txt")> "io error")
      (@throws <(@delete 3)> "io error")
      (@throws <(@delete "")> "io error")
      (@throws <(@delete)> "absent argument")
      (@throws <(@delete <>)> "alien argument")
    /
  /

  \
    # exit built-in

    (@throws <(@exit)> "absent argument")
    (@throws <(@exit -1)> "damaged argument")
    (@throws <(@exit 256)> "damaged argument")
  /

  \
    # query built-in

    (@returns <(@type (@query "TERM"))> "string")
    (@returns <(@equals (@length (@query "TERM")) 0)> 0)
    (@throws <(@query "__absent__")> "absent environment variable")
    (@throws <(@query)> "absent argument")
    (@throws <(@query 0)> "alien argument")
    (@throws <(@query <>)> "alien argument")
  /

  \
    # serialize built-in

    (@returns <(@serialize 0)> "0")
    (@returns <(@serialize 1)> "1")
    (@returns <(@serialize -1)> "-1")
    (@returns <(@serialize +1)> "1")
    (@returns <(@serialize 100)> "100")
    (@returns <(@serialize -100)> "-100")
    (@returns <(@serialize +100)> "100")
    (@returns <(@serialize 2147483647)> "2147483647")
    (@returns <(@serialize -2147483647)> "-2147483647")
    (@returns <(@serialize +2147483647)> "2147483647")
    (@returns <(@serialize 000000000000000000000000000000000000000000000000002147483647)> "2147483647")
    (@returns <(@serialize "")> "\"\"")
    (@returns <(@serialize "x")> "\"x\"")
    (@returns <(@serialize "text")> "\"text\"")
    (@returns <(@serialize "\n")> "\"\\n\"")
    (@returns <(@serialize "\\\"\t\r\n")> "\"\\\\\\\"\\t\\r\\n\"")
    (@returns <(@serialize "\xff")> "\"\\xff\"")
    (@returns <(@serialize "\x00\x1f\x7f\xff")> "\"\\x00\\x1f\\x7f\\xff\"")
    (@returns <(@serialize <>)> "<>")
    (@returns <(@serialize < >)> "< >")
    (@returns <(@serialize <(@merge "a" "b")>)> "<(@merge \"a\" \"b\")>")
    (@returns <(@serialize <
  # make strings more exciting!
  (@merge argument 1 "!")
>)> "<\n  # make strings more exciting!\n  (@merge argument 1 \"!\")\n>")
    (@returns <(@serialize @add)> "<(@add argument 1 argument 2)>")
    (@returns <(@serialize @subtract)> "<(@subtract argument 1 argument 2)>")
    (@returns <(@serialize @multiply)> "<(@multiply argument 1 argument 2)>")
    (@returns <(@serialize @divide)> "<(@divide argument 1 argument 2)>")
    (@returns <(@serialize @modulo)> "<(@modulo argument 1 argument 2)>")
    (@returns <(@serialize @increment)> "<(@increment argument 1)>")
    (@returns <(@serialize @decrement)> "<(@decrement argument 1)>")
    (@returns <(@serialize @and)> "<(@and argument 1 argument 2)>")
    (@returns <(@serialize @or)> "<(@or argument 1 argument 2)>")
    (@returns <(@serialize @not)> "<(@not argument 1)>")
    (@returns <(@serialize @precedes)> "<(@precedes argument 1 argument 2)>")
    (@returns <(@serialize @succeeds)> "<(@succeeds argument 1 argument 2)>")
    (@returns <(@serialize @equals)> "<(@equals argument 1 argument 2)>")
    (@returns <(@serialize @length)> "<(@length argument 1)>")
    (@returns <(@serialize @slice)> "<(@slice argument 1 argument 2 argument 3)>")
    (@returns <(@serialize @merge)> "<(@merge argument 1 argument 2)>")
    (@returns <(@serialize @read)> "<(@read argument 1 argument 2)>")
    (@returns <(@serialize @write)> "<(@write argument 1 argument 2)>")
    (@returns <(@serialize @delete)> "<(@delete argument 1)>")
    (@returns <(@serialize @query)> "<(@query argument 1)>")
    (@returns <(@serialize @exit)> "<(@exit argument 1)>")
    (@returns <(@serialize @serialize)> "<(@serialize argument 1)>")
    (@returns <(@serialize @deserialize)> "<(@deserialize argument 1)>")
    (@returns <(@serialize @type)> "<(@type argument 1)>")
  /

  \
    # deserialize built-in

    (@returns <(@deserialize "0")> 0)
    (@returns <(@deserialize "\"\"")> "")
    (@returns <(@deserialize "<>")> <>)
    (@returns <(@deserialize "<(@exit 1)>")> <(@exit 1)>)
    (@throws <(@deserialize "")> "codec error")
    (@throws <(@deserialize "#comment")> "codec error")
    (@throws <(@deserialize "@write")> "codec error")
    (@throws <(@deserialize "if 0 1")> "codec error")
  /

  \
    # type built-in

    (@returns <(@type 0)> "number")
    (@returns <(@type "")> "string")
    (@returns <(@type <>)> "function")
    (@throws <(@type)> "absent argument")
  /

  \
    # misc

    (@returns <> "")
    (@returns < > "")
    (@returns <
> "")
    (@returns <
  #comment
> "")
    (@returns <(@add, 1, 2)> 3)
    (@returns <(@add,1,2)> 3)
    (@returns <if,1,"x"> "x")
    (@returns <if (@equals \1,2,3/ 3) "x"> "x")
    (@mistakes "junk")
  /
/ |$error

if $error
\
  (@write @stderr (@serialize $error))
  (@write @stderr "\n")
  (@exit 1)
/

(@writeStatus "PASS" 32)
